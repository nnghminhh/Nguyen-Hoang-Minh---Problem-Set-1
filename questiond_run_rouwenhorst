import matplotlib.pyplot as plt
import numpy as np

from rouwenhorst import rouwenhorst
from simulate import simulate

#%% Discretize AR(1).
mu = 0.50000 # Intercept.
rho_val = [0.75000, 0.85, 0.95, 0.99]# Persistence.
sigma = 1.00000 # Std. dev. of error term.
N = 7 # Number of states.
ar = {'rou': rouwenhorst} # Method.
ar_y = {} # Container.
ar_pi = {} # Container.
sim = {}
# Select method and discretize.
for rho in rho_val:
    for i in ar:
        ar_y[i], ar_pi[i] = ar[i](mu, rho, sigma, N)
    
    # Simulate the AR(1)'s based on discretized processes.
    seed = 2025  # Seed for random number.
    T = 50  # Time horizon.
    np.random.seed(seed)
    
    # Simulate the Markov Chain.
    sim_key = f"ar_{i}_rho_{rho}"
    sim[sim_key] = simulate(ar_y[i], ar_pi[i], T)

#%% Plot the time series for each rho value
time = range(0, T)  # X-axis

# Create the plot
plt.figure(figsize=(10, 6))

for rho in rho_val:
    for i in ar:
        sim_key = f"ar_{i}_rho_{rho}"
        plt.plot(time, np.squeeze(sim[sim_key]), label=f'$\gamma$ = {rho}')

# Customize the plot
plt.xlabel('Time')
plt.ylabel('Y')
plt.title('Simulated AR(1) Process for Different Gamma Values')
plt.legend(title="Persistence (Gamma)")
plt.grid(True)
plt.show()
